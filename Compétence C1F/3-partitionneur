# Partitionneur

Différentes stratégies de partitionnement existent : 
- DefaultPatrinioner (pré et post version 2.4)
- UniformSticky
- Custom Partitioner 

Ces stratégies servent notamment à optimisier la charge que fait peser le producteur sur les brokers. Elles peuvent aussi servir à réaliser des regroupement suivant une logique métier.

- round-robin : lisse la charge
- regoupement logique métier : clé métier


## DefaultPartitioner

Partitionneur standard de Kafka (avant Kafka 2.4), responsable d’assigner chaque message produit à une partition du topic.
- Si la clé (key) du message est définie, il utilise un hash de la clé (modulo le nombre de partitions du topic) pour garantir que tous les messages avec la même clé vont dans la même partition. Nous sommes dans une logique métier.
- Si la clé est absente, le partitionneur sélectionne une partition de façon cyclique/round-robin (en tournant sur toutes les partitions disponibles). Nous sommes dans une logique d'optimiser l'impact du producteur sur le cluster kafka.

## UniformStickyPartitioner

Introduit par défaut depuis Kafka 2.4+ (remplace DefaultPartitioner comme partitionneur par défaut dans le client Java Kafka).
- Si une clé est présente : 
  - Comportement identique à l'ancien DefaultPartitioner
- Si aucune clé n'est fournie =>  Sticky, mais pas 100% aléatoire à chaque message :
  - Kafka choisit une partition "sticky" temporaire pour le producteur.
  - Tous les messages sans clé sont envoyés dans cette partition sticky tant que le batch n’est pas plein (ou tant qu’il n’y a pas de flush forcé).
  - Quand le batch est envoyé (plein, flush, ou timeout), Kafka choisit une nouvelle partition sticky, au hasard parmi les partitions disponibles, pour le prochain batch.

    => **Le round-robin s'effectue sur les partitions avec une logique de batch et non pas message par message.**



## Custom partitioner : 

Le Custom Partitioner est dans la logique métier. On veut avoir une vision précise de l'endroit où l'on met les messages en fonction de la valeur de la clé. 

```python
def custom_partitioner(city_name: str, num_partitions: int) -> int:
    """
    Attribue une partition en fonction du nom de la ville :
    - Les villes commençant par "PARIS" vont en partition 0
    - Les autres sont réparties sur 1..N-1 via hash
    - Si clé absente ou non valide : partition 'num_partitions' (hors bornes)
    """
    if isinstance(city_name, str):
        if city_name.upper().startswith("PARIS"):
            return 0
        else:
            return 1 + (abs(hash(city_name)) % (num_partitions - 1))
    else:
        # Cas d’erreur explicite : on renvoie un index invalide
        return num_partitions
```
Paris est toujours affecté à la partition 0, les autres villes sont réparties aléatoirement. La valeur de retour est entre 0 et N-1. Si c'est N c'est qu'on a rencontré un soucis. 


## Pour résumer 


| Partitioner            | Messages avec clé            | Messages sans clé                 | Usages / Particularité                                 |
| ---------------------- | ---------------------------- | --------------------------------- | ------------------------------------------------------ |
| **DefaultPartitioner** | Hash clé (affinité clé)      | Round-robin cyclique              | Classique, prédictible, mais pas optimal pour le débit |
| **UniformSticky**      | Hash clé (affinité clé)      | Partition “sticky” (batch random) | Meilleur débit, moins de contention, défaut ≥2.4       |
| **Custom**             | Selon la logique de l’auteur | Selon la logique de l’auteur      | Pour routage avancé, logique métier spécifique         |
